#include <iostream>
using namespace std;

// Abstract base class
class Shape {
public:
    // Pure virtual function
    virtual void draw() = 0;

    // Another pure virtual function
    virtual double area() = 0;

    // Virtual destructor (optional but good practice)
    virtual ~Shape() {}
};

// Derived class: Circle
class Circle : public Shape {
private:
    double radius;
public:
    Circle(double r) : radius(r) {}

    void draw() override {
        cout << "Drawing a circle with radius " << radius << endl;
    }

    double area() override {
        return 3.14159 * radius * radius;
    }
};

// Derived class: Rectangle
class Rectangle : public Shape {
private:
    double width, height;
public:
    Rectangle(double w, double h) : width(w), height(h) {}

    void draw() override {
        cout << "Drawing a rectangle: " << width << " x " << height << endl;
    }

    double area() override {
        return width * height;
    }
};

int main() {
    // Shape s; // ❌ Error! Cannot instantiate abstract class

    Shape* shape1 = new Circle(5.0);
    Shape* shape2 = new Rectangle(4.0, 6.0);

    shape1->draw();
    cout << "Area: " << shape1->area() << endl;

    shape2->draw();
    cout << "Area: " << shape2->area() << endl;

    delete shape1;
    delete shape2;

    return 0;
}
